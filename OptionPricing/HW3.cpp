//	Source file for Homework 3

#include <iostream>

#include "HW3.hpp"

using namespace std;


//	Exercise 1: Pseudorandom Number Generators.

void HW3_Test1LGG(long int& N, long int& seed, ofstream& file)
{
	file << "Standard Uniform Distribution Random Variable Generated by Linear Congruential Generator" << endl;

	vector<double> LGG = LinearCongruentialGenerator(N, seed);

	for (long int i = 0; i < LGG.size(); i++)
	{
		file << LGG[i] << endl;
	}

	file << endl;
}

void HW3_Test1ITM(long int& N, long int& seed, ofstream& file)
{
	file << "Standard Normal Distribution Random Variable Generated by Inverse Transform Method" << endl;

	vector<double> ITM = InverseTransformMethod(N, seed);

	for (long int i = 0; i < ITM.size(); i++)
	{
		file << ITM[i] << endl;
	}

	file << endl;
}

void HW3_Test1ARM(long int& N, long int& seed, ofstream& file)
{
	file << "Standard Normal Distribution Random Variable Generated by Acceptance-Rejection Method" << endl;

	vector<double> ARM = AcceptanceRejectionMethod(N, seed);

	for (long int i = 0; i < ARM.size(); i++)
	{
		file << ARM[i] << endl;
	}

	file << endl;
}

void HW3_Test1BMM(long int& N, long int& seed, ofstream& file)
{
	file << "Standard Normal Distribution Random Variable Generated by Box-Muller Method" << endl;

	vector<double> BMM = BoxMullerMethod(N, seed);

	for (long int i = 0; i < BMM.size(); i++)
	{
		file << BMM[i] << endl;
	}

	file << endl;
}

void HW3_Test1(long int& seed, ofstream& file)
{
	file << "Exercise 1: Pseudorandom Number Generators." << endl;

	long int N = 1000;

	HW3_Test1LGG(N, seed, file);
	HW3_Test1ITM(N, seed, file);
	HW3_Test1ARM(N, seed, file);
	HW3_Test1BMM(N, seed, file);

	file << endl;
}


//	Exercise 2: Monte Carlo Method for Plain Vanilla European Options.

void HW3_Test2Call(double& SE, EuropeanOption& EOCSample, vector<double>& BSC, string& Generator, long int& seed, ofstream& file)
{
	file << "Call Options" << endl;

	double V = BSC[0];
	double Delta = BSC[1];
	double Vega = BSC[4];

	file << V << "," << Delta << "," << Vega << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		vector<double> MC = EOCSample.MonteCarloPricer(SE, N, Generator, seed);

		double V1 = MC[0];
		double Delta1 = MC[1];
		double Vega1 = MC[2];

		double VError = abs(V1 - V);
		double DeltaError = abs(Delta1 - Delta);
		double VegaError = abs(Vega1 - Vega);

		file << N << "," << V1 << "," << sqrt(N) * VError << "," <<
			Delta1 << "," << sqrt(N) * DeltaError << "," << Vega1 << "," << sqrt(N) * VegaError << endl;
	}

	file << endl;
}

void HW3_Test2Put(double& SE, EuropeanOption& EOPSample, vector<double>& BSP, string& Generator, long int& seed, ofstream& file)
{
	file << "Put Options" << endl;

	double V = BSP[0];
	double Delta = BSP[1];
	double Vega = BSP[4];

	file << V << "," << Delta << "," << Vega << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		vector<double> MC = EOPSample.MonteCarloPricer(SE, N, Generator, seed);

		double V1 = MC[0];
		double Delta1 = MC[1];
		double Vega1 = MC[2];

		double VError = abs(V1 - V);
		double DeltaError = abs(Delta1 - Delta);
		double VegaError = abs(Vega1 - Vega);

		file << N << "," << V1 << "," << sqrt(N) * VError << "," <<
			Delta1 << "," << sqrt(N) * DeltaError << "," << Vega1 << "," << sqrt(N) * VegaError << endl;
	}

	file << endl;
}

void HW3_Test2(double& SE, EuropeanOption& EOCSample, EuropeanOption& EOPSample, long int& seed, ofstream& file)
{
	file << "Exercise 2: Monte Carlo Method for Plain Vanilla European Options." << endl;

	string Generator = "ITM";
	vector<double> BSC = EOCSample.BSPricer(SE);
	vector<double> BSP = EOPSample.BSPricer(SE);

	HW3_Test2Call(SE, EOCSample, BSC, Generator, seed, file);
	HW3_Test2Put(SE, EOPSample, BSP, Generator, seed, file);

	file << endl;
}


//	Exercise 3: Monte Carlo Method for Path-Dependent Options.

void HW3_Test3Fix(double& SB, BarrierOption& BOSample, double& BS, string& Generator, long int& seed, ofstream& file)
{
	file << "Fixed Number of Time Intervals" << endl;

	double V = BS;

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int n = 50 * pow(2, k);
		long int m = 200;
		long int N = m * n;

		double MC = BOSample.MonteCarloPricer(SB, n, m, Generator, seed);

		double V1 = MC;

		double VError = abs(V1 - V);

		file << N << "," << m << "," << n << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW3_Test3Opt(double& SB, BarrierOption& BOSample, double& BS, string& Generator, long int& seed, ofstream& file)
{
	file << "Optimal Number of Time Intervals" << endl;

	double T = BOSample.Maturity();

	double V = BS;

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);
		long int m = ceil(pow(N, 1 / (double)3)*pow(T, 2 / (double)3));
		long int n = N / m;

		double MC = BOSample.MonteCarloPricer(SB, N, Generator, seed);

		double V1 = MC;

		double VError = abs(V1 - V);

		file << N << "," << m << "," << n << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW3_Test3(double& SB, BarrierOption& BOSample, long int& seed, ofstream& file)
{
	file << "Exercise 3: Monte Carlo Method for Path-Dependent Options." << endl;

	long int m = 200;
	string Generator = "ITM";
	double BS = BOSample.BSPrice(SB);

	HW3_Test3Fix(SB, BOSample, BS, Generator, seed, file);
	HW3_Test3Opt(SB, BOSample, BS, Generator, seed, file);

	file << endl;
}


//	Exercise 4: Comparison of Random Number Generators.

void HW3_Test4Gen(double& S, EuropeanOption& EOSample, vector<double>& BS, string& Generator, long int& seed, ofstream& file)
{
	file << Generator << endl;

	double V = BS[0];

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		vector<double> MC = EOSample.MonteCarloPricer(S, N, Generator, seed);

		double V1 = MC[0];

		double VError = abs(V1 - V);

		file << N << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW3_Test4(double& S, EuropeanOption& EOSample, long int& seed, ofstream& file)
{
	file << "Exercise 4: Comparison of Random Number Generators." << endl;

	vector<double> BS = EOSample.BSPricer(S);
	
	vector<string> Generators;
	Generators.push_back("ITM");
	Generators.push_back("ARM");
	Generators.push_back("BMM");

	for (int i = 0; i < 3; i++)
	{
		HW3_Test4Gen(S, EOSample, BS, Generators[i], seed, file);
	}

	file << endl;
}


void HW3_Test()
{
	ofstream file("HW3.csv");
	file << "!! MTH9821 Homework 3 !!" << endl;

	int precision = numeric_limits<double>::max_digits10;
	file << setprecision(precision) << endl;

	long int seed = 1;

	double SE = 41.0;
	double SB = 39.0;
	double S = 50.0;
	EuropeanOption EOCSample(42.0, 0.75, 0.03, 0.20, 0.01, "C", "EOCSample");
	EuropeanOption EOPSample(42.0, 0.75, 0.03, 0.20, 0.01, "P", "EOPSample");
	BarrierOption BOSample(39.0, 0.75, 0.02, 0.25, 0.01, 35.0, "C", "DnO", "BOSample");
	EuropeanOption EOSample(55.0, 0.5, 0.04, 0.30, 0.0, "P", "EOSample");

	HW3_Test1(seed, file);
	HW3_Test2(SE, EOCSample, EOPSample, seed, file);
	HW3_Test3(SB, BOSample, seed, file);
	HW3_Test4(S, EOSample, seed, file);

	file << endl;
}
