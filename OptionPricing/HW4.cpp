//	Source file for Homework 4

#include <iostream>

#include "HW4.hpp"

using namespace std;


//	Exercise 1: Pseudorandom Number Generators.

void HW4_Test1BMM(long int& N, long int& seed, ofstream& file)
{
	file << "Standard Normal Distribution Random Variable Generated by Box-Muller Method" << endl;

	vector<double> BMM = BoxMullerMethod(N, seed);

	for (long int i = 0; i < BMM.size(); i++)
	{
		file << BMM[i] << endl;
	}

	file << endl;
}

void HW4_Test1(long int& seed, ofstream& file)
{
	file << "Exercise 1: Pseudorandom Number Generators." << endl;

	long int N = 1000;

	HW4_Test1BMM(N, seed, file);

	file << endl;
}


//	Exercise 2: Variance Reduction Techniques for Monte Carlo Pricing of European Options.

void HW4_Test2CV(double& SE, EuropeanOption& EOSample, vector<double>& BS, string& Generator, long int& seed, ofstream& file)
{
	file << "Control Variate Technique" << endl;

	double V = BS[0];

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		double MC = EOSample.MCCVPricer(SE, N, Generator, seed);

		double V1 = MC;

		double VError = abs(V1 - V);

		file << N << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW4_Test2AV(double& SE, EuropeanOption& EOSample, vector<double>& BS, string& Generator, long int& seed, ofstream& file)
{
	file << "Antithetic Variables" << endl;
	
	double V = BS[0];

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		double MC = EOSample.MCAVPricer(SE, N, Generator, seed);

		double V1 = MC;

		double VError = abs(V1 - V);

		file << N << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW4_Test2MM(double& SE, EuropeanOption& EOSample, vector<double>& BS, string& Generator, long int& seed, ofstream& file)
{
	file << "Moment Matching" << endl;

	double V = BS[0];

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		double MC = EOSample.MCMMPricer(SE, N, Generator, seed);

		double V1 = MC;

		double VError = abs(V1 - V);

		file << N << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW4_Test2CVMM(double& SE, EuropeanOption& EOSample, vector<double>& BS, string& Generator, long int& seed, ofstream& file)
{
	file << "Simultaneous Moment Matching and Control Variate" << endl;

	double V = BS[0];

	file << V << endl;

	for (int k = 0; k < 10; k++)
	{
		long int N = 10000 * pow(2, k);

		double MC = EOSample.MCCVMMPricer(SE, N, Generator, seed);

		double V1 = MC;

		double VError = abs(V1 - V);

		file << N << "," << V1 << "," << VError << endl;
	}

	file << endl;
}

void HW4_Test2(double& SE, EuropeanOption& EOSample, long int& seed, ofstream& file)
{
	file << "Exercise 2: Variance Reduction Techniques for Monte Carlo Pricing of European Options." << endl;

	string Generator = "BMM";
	vector<double> BS = EOSample.BSPricer(SE);

	HW4_Test2CV(SE, EOSample, BS, Generator, seed, file);
	HW4_Test2AV(SE, EOSample, BS, Generator, seed, file);
	HW4_Test2MM(SE, EOSample, BS, Generator, seed, file);
	HW4_Test2CVMM(SE, EOSample, BS, Generator, seed, file);

	file << endl;
}


//	Exercise 3: Monte Carlo Pricing for Basket Options.

void HW4_Test3Basket(double& SB1, double& SB2, BasketOption& BOSample, string& Generator, long int& seed, ofstream& file)
{
	file << "Basket Options" << endl;

	for (int k = 0; k < 9; k++)
	{
		long int N = 10000 * pow(2, k);

		double MC = BOSample.MonteCarloPricer(SB1, SB2, N, Generator, seed);

		double V1 = MC;

		file << N << "," << V1 << endl;
	}

	file << endl;
}

void HW4_Test3(double& SB1, double& SB2, BasketOption& BOSample, long int& seed, ofstream& file)
{
	file << "Exercise 3: Monte Carlo Pricing for Basket Options." << endl;

	string Generator = "BMM";

	HW4_Test3Basket(SB1, SB2, BOSample, Generator, seed, file);

	file << endl;
}


//	Exercise 4: Monte Carlo Pricing for Path-Dependent Basket Options.

void HW4_Test4Look(double& SB1, double& SB2, LookbackBasketOption& LBOSample, string& Generator, long int& seed, ofstream& file)
{
	file << "Lookback Basket Options" << endl;

	for (int k = 0; k < 10; k++)
	{
		long int n = 50 * pow(2, k);
		long int m = 150;
		long int N = 2 * n * m;

		double MC = LBOSample.MonteCarloPricer(SB1, SB2, n, m, Generator, seed);

		double V1 = MC;

		file << n << "," << m << "," << V1 << endl;
	}

	file << endl;
}

void HW4_Test4(double& SB1, double& SB2, LookbackBasketOption& LBOSample, long int& seed, ofstream& file)
{
	file << "Exercise 4: Monte Carlo Pricing for Path-Dependent Basket Options." << endl;

	string Generator = "BMM";

	HW4_Test4Look(SB1, SB2, LBOSample, Generator, seed, file);

	file << endl;
}


//	Exercise 5: Monte Carlo Simulation for the Heston Model.

void HW4_Test5Heston(double& SH, EuropeanHestonOption& HOSample, vector<double> BS, string& Generator, long int& seed, ofstream& file)
{
	file << "European Options with Heston Model" << endl;

	file << BS[0] << endl;

	for (int k = 0; k < 6; k++)
	{
		long int n = 500 * pow(2, k);
		long int m = 175;
		long int N = 2 * n * m;

		double acc = 0.000001;

		double MC = HOSample.MonteCarloPricer(SH, n, m, Generator, seed);

		double V1 = MC;
		double ImpVol = HOSample.BSImpVol(V1, SH, acc);

		file << n << "," << m << "," << V1 << "," << ImpVol << endl;
	}

	file << endl;
}

void HW4_Test5(double& SH, EuropeanHestonOption& HOSample, long int& seed, ofstream& file)
{
	file << "Exercise 5: Monte Carlo Simulation for the Heston Model." << endl;

	string Generator = "BMM";

	vector<double> BS = HOSample.BSPricer(SH);

	HW4_Test5Heston(SH, HOSample, BS, Generator, seed, file);

	file << endl;
}


void HW4_Test()
{
	ofstream file("HW4.csv");
	file << "!! MTH9821 Homework 4 !!" << endl;

	int precision = numeric_limits<double>::max_digits10;
	file << setprecision(precision) << endl;

	long int seed = 1;

	double SE = 50.0;
	double SB1 = 25.0;
	double SB2 = 30.0;
	double SH = 50.0;
	EuropeanOption EOSample(55.0, 0.75, 0.04, 0.30, 0.0, "P", "EOSample");
	BasketOption BOSample(50.0, 0.75, 0.05, 0.30, 0.20, 0.0, 0.0, 0.25, "C", "BOSample");
	LookbackBasketOption LBOSample(50.0, 0.75, 0.05, 0.30, 0.20, 0.0, 0.0, 0.25, "C", "LBOSample");
	EuropeanHestonOption HOSample(50.0, 0.5, 0.05, 0.30, 3.0, 0.35, 0.25, -0.15, 0.0, "P", "HOSample");

	HW4_Test1(seed, file);
	HW4_Test2(SE, EOSample, seed, file);
	HW4_Test3(SB1, SB2, BOSample, seed, file);
	HW4_Test4(SB1, SB2, LBOSample, seed, file);
	HW4_Test5(SH, HOSample, seed, file);

	file << endl;
}
